[{"path":"/articles/JointRcppML.html","id":"load-in-the-example-data","dir":"Articles","previous_headings":"","what":"Load in the example data","title":"JointRcppML","text":"small subset data TCGA-COAD PanCancer Atlas easy loading. full example dataset can loaded ExampleJointRcppML package, files quite large. Input files pre-processed appropriate data type. case, Methylation 450k array data Beta values removal probes missing >2% values imputation remaining missing values NA values. RNAseq data processed vst normalization using DESeq2. Joint NMF workflow intended use multi-omic data partially shared samples, meaning subset samples present data sets. features within two data types distinct.","code":"Betas<- TCGA_COAD_Betas_subset  RNA<- TCGA_COAD_vst_RNAseq_subset  metadata<- TCGA_COAD_metadata"},{"path":"/articles/JointRcppML.html","id":"integrate-and-weight-data","dir":"Articles","previous_headings":"","what":"Integrate and Weight data","title":"JointRcppML","text":"purpose function join two datasets weight appropriately. Column normalization optional applied dataset independently, prior weighting. case applied Beta values samples global hypomethylation given weight NMF model samples. Following column normalization, weights determined calculating transformation needed make total sum data1 equivalent total sum data2 shared samples.","code":"input<- integrate_and_weight(Betas, RNA, normalize_data1 = TRUE)  # Get the matrix and sparse matrix objects from the output combined_matrix<- input[[\"combined_matrix\"]]  sparse_matrix<- input[[\"sparse_matrix\"]]"},{"path":"/articles/JointRcppML.html","id":"cross-validate-to-determine-the-number-of-nmf-components","dir":"Articles","previous_headings":"","what":"Cross validate to determine the number of NMF components","title":"JointRcppML","text":"modification crossValidate function RcppML package can accept arguments RcppML::nmf. version work data contains NA values, always case data used Joint NMF analysis. creates additional mask NA values separately randomly masked values used model evaluation.","code":"CV<- joint_crossValidate(sparse_matrix, k=1:8, reps=4, n=0.05) #> Warning in Matrix.DeprecatedCoerce(cd1, cd2): 'as(<matrix>, \"ngCMatrix\")' is deprecated. #> Use 'as(as(as(., \"nMatrix\"), \"generalMatrix\"), \"CsparseMatrix\")' instead. #> See help(\"Deprecated\") and help(\"Matrix-deprecated\"). plot(CV)"},{"path":"/articles/JointRcppML.html","id":"run-nmf-using-the-rcppml-package","dir":"Articles","previous_headings":"","what":"Run NMF using the RcppML package","title":"JointRcppML","text":"","code":"model<- RcppML::nmf(sparse_matrix, k = 6, seed = 1:3, tol = 1e-6, mask = \"NA\") #> Warning in RcppML::nmf(sparse_matrix, k = 6, seed = 1:3, tol = 1e-06, mask = #> \"NA\"): NA values were detected in the data. Setting \"mask = 'NA'\""},{"path":"/articles/JointRcppML.html","id":"merge-metadata","dir":"Articles","previous_headings":"","what":"Merge metadata","title":"JointRcppML","text":"example case one set metadata, however function also designed work situations metadata data type stored separate dataframes. takes hassle trying join, clean, align metadata labels interest downstream analysis.","code":"labels<- merge_metadata(metadata, metadata, \"SampleID\", combined_matrix,                          metadata_columns = c(\"Purity\", \"Location\", \"Age\", \"Active_Driver\",                                               \"DNA_Methylation_Category_String\"))"},{"path":"/articles/JointRcppML.html","id":"use-the-plot-functionality-as-demonstrated-in-the-rcppml-package","dir":"Articles","previous_headings":"","what":"Use the plot functionality as demonstrated in the RcppML package","title":"JointRcppML","text":"","code":"nmf_group <- summary(model, group_by = labels[[\"Active_Driver\"]]) plot(nmf_group, stat = \"sum\") nmf_group2 <- summary(model, group_by = labels[[\"DNA_Methylation_Category_String\"]]) plot(nmf_group2, stat = \"sum\")"},{"path":"/articles/JointRcppML.html","id":"make-a-umap-of-the-nmf-factors","dir":"Articles","previous_headings":"","what":"Make a UMAP of the NMF factors","title":"JointRcppML","text":"","code":"my_umap<- nmf_umap(model, group_labels = labels[[\"DNA_Methylation_Category_String\"]], n_neighbors=5) my_umap"},{"path":"/articles/JointRcppML.html","id":"heatmap-of-sample-weights","dir":"Articles","previous_headings":"","what":"Heatmap of Sample Weights","title":"JointRcppML","text":"function uses pheatmap visualize sample weights H matrix NMF output. can customize using standard pheatmap arguments, easily pass metadata labels sample annotations.","code":"H_heatmap(model,            group_labels = labels,            group_colors = list(                               DNA_Methylation_Category_String=c(\"CIMP-H\"=\"orange\", \"CRC CIMP-L\"=\"green\",                                                                  \"Non-CIMP\"=\"skyblue\"),                                Location=c(\"Cecum\"=\"tan\", \"Colon\"=\"tan4\"),                                Active_Driver=c(\"Apc\"=\"yellow\", \"Braf\"=\"red\", \"Braf_w_other\"=\"hotpink\",                                                \"Kras\"=\"limegreen\", \"Kras_w_other\"=\"palegreen\",                                                \"Smad4\"=\"steelblue1\", \"Tp53\"=\"purple\")))"},{"path":"/articles/JointRcppML.html","id":"top-features","dir":"Articles","previous_headings":"","what":"Top Features","title":"JointRcppML","text":"Pull top features W matrix NMF component. can also set easy downstream enrichment analyses getting top features data type.","code":"Top_features<- topFeatures(model, n=50, filter_dfs=list(Betas, RNA)) Top_features[[\"nmf1_df1\"]] #>  [1] \"cg00021978\" \"cg00007239\" \"cg00012317\" \"cg00028598\" \"cg00008695\" #>  [6] \"cg00005740\" \"cg00015340\" \"cg00029246\" \"cg00019841\" \"cg00026141\" #> [11] \"cg00009922\" \"cg00022145\" \"cg00003529\" \"cg00021242\" \"cg00005166\" #> [16] \"cg00018850\" \"cg00026938\" \"cg00004773\" \"cg00018696\" \"cg00013618\" #> [21] \"cg00021550\" \"cg00012529\" \"cg00026776\" \"cg00012698\" \"cg00013196\" #> [26] \"cg00019997\" \"cg00016127\" \"cg00025715\" \"cg00019877\" \"cg00016406\" #> [31] \"cg00009750\" \"cg00016481\" \"cg00016360\" \"cg00007326\" \"cg00023411\" #> [36] \"cg00000948\" \"cg00020533\" \"cg00001446\" \"cg00013006\" \"cg00019511\" #> [41] \"cg00015930\" \"cg00013349\" \"cg00005215\" \"cg00020419\" \"cg00001791\" #> [46] \"cg00019678\" \"cg00019151\" \"cg00018204\" \"cg00023351\" \"cg00003181\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mary Olesnavich. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Olesnavich M (2025). Joint.RcppML: RcppML Extension Joint NMF. R package version 0.0.0.9000.","code":"@Manual{,   title = {Joint.RcppML: RcppML Extension For Joint NMF},   author = {Mary Olesnavich},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/reference/H_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of H matrix for Joint NMF Visualization — H_heatmap","title":"Heatmap of H matrix for Joint NMF Visualization — H_heatmap","text":"function designed allow visualize weights H matrix output RcppML package. specifying group labels function can easily see sample weights relate variables interest","code":""},{"path":"/reference/H_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of H matrix for Joint NMF Visualization — H_heatmap","text":"","code":"H_heatmap(   model,   group_labels = NULL,   group_colors = NULL,   show_rownames = FALSE,   cluster_cols = FALSE,   cluster_rows = TRUE,   clustering_method = \"ward.D2\",   main = \"Heatmap of Samples, H matrix\",   cutree_rows = 4,   ... )"},{"path":"/reference/H_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of H matrix for Joint NMF Visualization — H_heatmap","text":"model NMF object generated RcppML group_labels Sample annotations heatmap. Input can vector list vectors properly aligned samples H matrix. group_colors want manually specify colors row annotations. Input can vector list vectors show_rownames Show feature names heatmap, default FALSE cluster_cols Clustering NMF components, default FALSE cluster_rows Clustering Samples, default TRUE clustering_method Heatmap clustering method, default ward.D2, options pheatmap main Heatmap title cutree_rows Specify number sample clusters heatmap ... Arguments can passed pheatmap function","code":""},{"path":"/reference/H_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of H matrix for Joint NMF Visualization — H_heatmap","text":"Heatmap H (Sample) weights matrix","code":""},{"path":"/reference/H_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heatmap of H matrix for Joint NMF Visualization — H_heatmap","text":"primary input nmf object RcppML::nmf function. can also specify labels interest, single vector list vectors aligned H matrix. like specify colors labels, can also single vector list. Refer pheatmap function parameters customize heatmap.","code":""},{"path":"/reference/TCGA_COAD_Betas_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"TCGA_COAD_Betas_subset — TCGA_COAD_Betas_subset","title":"TCGA_COAD_Betas_subset — TCGA_COAD_Betas_subset","text":"small subset Methylation data TCGA PanCancer Atlas Publication use example data Joint NMF analysis.","code":""},{"path":"/reference/TCGA_COAD_Betas_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TCGA_COAD_Betas_subset — TCGA_COAD_Betas_subset","text":"","code":"TCGA_COAD_Betas_subset"},{"path":[]},{"path":"/reference/TCGA_COAD_Betas_subset.html","id":"tcga-coad-betas-subset","dir":"Reference","previous_headings":"","what":"TCGA_COAD_Betas_subset","title":"TCGA_COAD_Betas_subset — TCGA_COAD_Betas_subset","text":"data frame 500 rows 100 columns","code":""},{"path":"/reference/TCGA_COAD_Betas_subset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TCGA_COAD_Betas_subset — TCGA_COAD_Betas_subset","text":"https://gdc.cancer.gov/-data/publications/pancanatlas","code":""},{"path":"/reference/TCGA_COAD_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"TCGA COAD RNAseq and Methylation metadata — TCGA_COAD_metadata","title":"TCGA COAD RNAseq and Methylation metadata — TCGA_COAD_metadata","text":"Metadata file corresponding subset RNAseq Methylation data TCGA PanCancer Atlas Publication use example data Joint NMF analysis","code":""},{"path":"/reference/TCGA_COAD_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TCGA COAD RNAseq and Methylation metadata — TCGA_COAD_metadata","text":"","code":"TCGA_COAD_metadata"},{"path":[]},{"path":"/reference/TCGA_COAD_metadata.html","id":"tcga-coad-metadata","dir":"Reference","previous_headings":"","what":"TCGA_COAD_metadata","title":"TCGA COAD RNAseq and Methylation metadata — TCGA_COAD_metadata","text":"data frame 223 rows 18 columns","code":""},{"path":"/reference/TCGA_COAD_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TCGA COAD RNAseq and Methylation metadata — TCGA_COAD_metadata","text":"https://gdc.cancer.gov/-data/publications/pancanatlas","code":""},{"path":"/reference/TCGA_COAD_vst_RNAseq_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"TCGA_COAD_vst_RNAseq_subset — TCGA_COAD_vst_RNAseq_subset","title":"TCGA_COAD_vst_RNAseq_subset — TCGA_COAD_vst_RNAseq_subset","text":"small subset RNAseq data TCGA PanCancer Atlas Publication use example data Joint NMF analysis. Vst normalized using DESeq2.","code":""},{"path":"/reference/TCGA_COAD_vst_RNAseq_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TCGA_COAD_vst_RNAseq_subset — TCGA_COAD_vst_RNAseq_subset","text":"","code":"TCGA_COAD_vst_RNAseq_subset"},{"path":[]},{"path":"/reference/TCGA_COAD_vst_RNAseq_subset.html","id":"tcga-coad-vst-rnaseq-subset","dir":"Reference","previous_headings":"","what":"TCGA_COAD_vst_RNAseq_subset","title":"TCGA_COAD_vst_RNAseq_subset — TCGA_COAD_vst_RNAseq_subset","text":"data frame 500 rows 75 columns","code":""},{"path":"/reference/TCGA_COAD_vst_RNAseq_subset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TCGA_COAD_vst_RNAseq_subset — TCGA_COAD_vst_RNAseq_subset","text":"https://gdc.cancer.gov/-data/publications/pancanatlas","code":""},{"path":"/reference/integrate_and_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate and Weight Datasets for Joint NMF analysis with the RcppML package — integrate_and_weight","title":"Integrate and Weight Datasets for Joint NMF analysis with the RcppML package — integrate_and_weight","text":"Function first normalize samples within input dataframe (optional), join weight two separate datasets partially shared samples, sum data equivalent samples shared. output list containing matrix sparse matrix. sparse matrix can used input Joint NMF analysis.","code":""},{"path":"/reference/integrate_and_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate and Weight Datasets for Joint NMF analysis with the RcppML package — integrate_and_weight","text":"","code":"integrate_and_weight(   data1,   data2,   normalize_data1 = TRUE,   normalize_data2 = TRUE )"},{"path":"/reference/integrate_and_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate and Weight Datasets for Joint NMF analysis with the RcppML package — integrate_and_weight","text":"data1 First set data (data.frame matrix) data2 Second set data (data.frame matrix) normalize_data1 Column normalize data1. Use want normalize samples within dataset prior weighting. (TRUE/FALSE) normalize_data2 Column normalize data2. Use want normalize samples within dataset prior weighting. (TRUE/FALSE)","code":""},{"path":"/reference/integrate_and_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate and Weight Datasets for Joint NMF analysis with the RcppML package — integrate_and_weight","text":"list containing combined_matrix sparse matrix integrated weighted data. combined_matrix matrix form easy viewing, sparse matrix can used input RcppML package output also contain weights used scaling number shared unique samples","code":""},{"path":"/reference/integrate_and_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrate and Weight Datasets for Joint NMF analysis with the RcppML package — integrate_and_weight","text":"function requires input two datasets (dataframes matrices) samples columns features rows. typically two different modalities partially matched samples. sets input data normalized appropriate data type. Additional sample normalization may appropriate certain cases. example raw beta values methylation data, sample normalization ensures samples sum total beta values, ensuring less global methylation (tumors) given equal weight. Column normalization used missing values dataset. Column names matched samples MUST . features (rownames) unique.","code":""},{"path":"/reference/joint_crossValidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified version of the crossValidate function from the RcppML package — joint_crossValidate","title":"Modified version of the crossValidate function from the RcppML package — joint_crossValidate","text":"Existing crossValidate function compatible data contains NA 0 values. modified version address challenge, specifically designed accommodate joint NMF analyses, always contain missing data. function works code original, selects random values mask \"NA\". Randomly masked values combined NA values computation, used alone model evaluation.","code":""},{"path":"/reference/joint_crossValidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified version of the crossValidate function from the RcppML package — joint_crossValidate","text":"","code":"joint_crossValidate(data, k, reps = 3, n = 0.05, ...)"},{"path":"/reference/joint_crossValidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified version of the crossValidate function from the RcppML package — joint_crossValidate","text":"data Input data joint NMF, matrix data.frame format k Number groups evaluate (Example, 2:8) reps Number repeats, default=3 n Percent data mask, default= 0.05 (5 percent) ... Arguments RcppML:nmf function","code":""},{"path":"/reference/joint_crossValidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified version of the crossValidate function from the RcppML package — joint_crossValidate","text":"object plotted using plot()","code":""},{"path":"/reference/merge_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to merge metadata from two datasets and extract label of interest — merge_metadata","title":"Function to merge metadata from two datasets and extract label of interest — merge_metadata","text":"downstream joint NMF analysis, need align labels interest samples input data, often metadata stored multiple dataframes corresponding different data types. provides easy workaround extract metadata label interest align combined input data file one line.","code":""},{"path":"/reference/merge_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to merge metadata from two datasets and extract label of interest — merge_metadata","text":"","code":"merge_metadata(metadata1, metadata2, id_col, data_matrix, metadata_columns)"},{"path":"/reference/merge_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to merge metadata from two datasets and extract label of interest — merge_metadata","text":"metadata1 First metadata table metadata2 Second metadata table id_col Name column metadata contains sample IDs (\"Sample_ID\"). Must dataframes data_matrix NMF input data combined dataframe, column names corresponding samples metadata_columns Metadata column(s) interest","code":""},{"path":"/reference/merge_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to merge metadata from two datasets and extract label of interest — merge_metadata","text":"vector aligned group label choice, list vectors one group","code":""},{"path":"/reference/merge_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to merge metadata from two datasets and extract label of interest — merge_metadata","text":"function requires two dataframes containing sample metadata. Note \"group interest\" sample \"ID column\" MUST name dataframes want group labels dataframes. Labels present one data type acceptable NA values used missing information.","code":""},{"path":"/reference/nmf_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot UMAP of RcppML sample embeddings — nmf_umap","title":"Plot UMAP of RcppML sample embeddings — nmf_umap","text":"Function easily plot output RcppML UMAP, using RcppML object group label choice","code":""},{"path":"/reference/nmf_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot UMAP of RcppML sample embeddings — nmf_umap","text":"","code":"nmf_umap(model, group_labels, custom_colors = NULL, ...)"},{"path":"/reference/nmf_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot UMAP of RcppML sample embeddings — nmf_umap","text":"model Output RcppML group_labels list single vector group_labels, properly aligned NMF input matrix custom_colors Optional specific colors. Can either single vector Ex. c(\"GroupA\" = \"#FF5733\", \"GroupB\" = \"#33FF57\", \"GroupC\" = \"#3357FF\") list Ex. list(c(\"GroupA\" = \"#FF5733\", \"GroupB\" = \"#33FF57\"),  # Colors first group c(\"Type1\" = \"#E41A1C\", \"Type2\" = \"#377EB8\", \"Type3\" = \"#4DAF4A\")  # Colors second group ... Arguments can passed uwot::umap function","code":""},{"path":"/reference/nmf_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot UMAP of RcppML sample embeddings — nmf_umap","text":"UMAP plot(s) sample embeddings RcppML object","code":""},{"path":"/reference/topFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Top Features from Joint NMF W Matrix — topFeatures","title":"Extract Top Features from Joint NMF W Matrix — topFeatures","text":"function designed allow extract top features NMF component model. especially useful Joint NMF analyses gives option pull top features input dataframe, enabling easy downstream enrichment analyses.","code":""},{"path":"/reference/topFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Top Features from Joint NMF W Matrix — topFeatures","text":"","code":"topFeatures(model, n = 300, components = NULL, filter_dfs = NULL)"},{"path":"/reference/topFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Top Features from Joint NMF W Matrix — topFeatures","text":"model NMF object generated RcppML n Number features W matrix return NMF component components Allows specify NMF components (Ex. 1:3 return top features NMF 1, 2, 3). default NULL return features components filter_dfs Default, NULL, return top features. joint NMF analysis may want top features belonging particular data type, include dataframe(s) LIST object, features rownames. Dataframes can input data dataframe relevant features rownames. (Ex. filter_dfs=list(tcga_betas, tcga_rna_seq) return top probes top genes component separately)","code":""},{"path":"/reference/topFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Top Features from Joint NMF W Matrix — topFeatures","text":"List vectors top n features NMF component","code":""},{"path":"/reference/topFeatures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Top Features from Joint NMF W Matrix — topFeatures","text":"primary input nmf object RcppML::nmf function. can specify number features output, well specific NMF components (default=NULL return top features components). joint NMF analyses like top features separated data type, use \"filter_dfs\" argument. accepts list dataframes, can either raw input data dataframe features rownames.","code":""}]
